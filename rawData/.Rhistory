popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
weed <- cleanDataFnct()
write.csv("weedData.csv", sep = ",")
write.csv("weedData.csv")
write.csv(weed, "weedData.csv")
shops <- storeOpen()
write.csv(shops, "shopData.csv")
source('~/Documents/Poison Center/WAstate_PotAnalysis/scripts/reactiveMap.R')
getwd()
setwd("~/Documents/Poison Center/WAstate_PotAnalysis/rawData")
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- read.csv("weedData.csv")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
shops <- read.csv("shopData.csv")
shops <- shops[complete.cases(shops),]
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
weed <- read.csv("weedData.csv", sep = ",")
head(weed)
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- read.csv("weedData.csv", sep = ",")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
shops <- read.csv("shopData.csv", sep = ",")
shops <- shops[complete.cases(shops),]
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
head(shops)
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- read.csv("weedData.csv", sep = ",")
weed$Date <- c(as.POSIXct(weed$Date, format = "%m/%e/%y %H:%M"))
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
shops <- read.csv("shopData.csv", sep = ",")
shops$opening <- as.POSIXct(shops$opening, format = "%m/%d/%y")
shops <- shops[complete.cases(shops),]
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- read.csv("weedData.csv", sep = ",")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
weed$Date <- c(as.POSIXct(weed$Date, format = "%m/%e/%y %H:%M"))
shops <- read.csv("shopData.csv", sep = ",")
shops <- shops[complete.cases(shops),]
shops$opening <- as.POSIXct(shops$opening, format = "%m/%d/%y")
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
weed <- read.csv("weedData.csv", sep = ",")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
weed$Date <- c(as.POSIXct(weed$Date, format = "%m/%e/%y %H:%M"))
head(weed)
weed <- read.csv("weedData.csv", sep = ",")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
weed$Date <- as.POSIXct(weed$Date, format = "%m/%e/%y %H:%M")
head(weed)
weed <- read.csv("weedData.csv", sep = ",")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
head(weed)
class(weed$Date)
weed <- load("data.Rda")
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
weed <- load("data.Rda")
head(weed)
weed <- read("data.Rda")
weed <- readRDS(file = "data.Rda")
save(shops,file="shopdata.rds")
source('~/Documents/Poison Center/WAstate_PotAnalysis/scripts/storeOpen.R')
source('~/Documents/Poison Center/WAstate_PotAnalysis/map_app/cleanDataFnct.R')
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- cleanDataFnct()
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
shops <- storeOpen()
shops <- shops[complete.cases(shops),]
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
setwd("~/Documents/Poison Center/WAstate_PotAnalysis/map_app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/Poison Center/WAstate_PotAnalysis/map_app")
setwd("~/Documents/Poison Center/WAstate_PotAnalysis/map_app/data")
shiny::runApp('~/Documents/Poison Center/WAstate_PotAnalysis/map_app')
rawData <- read.csv("MarijaunaExposureData.csv", sep=",")
source('~/Documents/Poison Center/WAstate_PotAnalysis/map_app/weedData.R')
shiny::runApp('~/Documents/Poison Center/WAstate_PotAnalysis/map_app')
source('~/Documents/Poison Center/WAstate_PotAnalysis/map_app/weedData.R')
source('~/Documents/Poison Center/WAstate_PotAnalysis/map_app/shopData.R')
shiny::runApp('~/Documents/Poison Center/WAstate_PotAnalysis/map_app')
setwd("~/Documents/Poison Center/WAstate_PotAnalysis/rawData")
library(knitr)
library(htmltools)
library(shiny)
library(leaflet)
library(zipcode)
# Get data
weed <- cleanDataFnct()
weed <- weed[complete.cases(weed) & weed$Zip > 10000, ]
shops <- storeOpen()
shops <- shops[complete.cases(shops),]
# Create UI
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 15, right = 50,
sliderInput("range", "Choose a date range:", min(weed$Date), max(weed$Date),
value = range(weed$Date), step = 0.1, timeFormat = "%b-%d-%Y"
)
)
)
server <- function(input, output, session) {
# Plot the map
output$map <- renderLeaflet({
leaflet() %>% addProviderTiles("CartoDB.Positron") %>%
setView(lng = -122.213380, lat = 47.595225, zoom = 10) %>%
addLayersControl(overlayGroups = c("Recreational Shops", "Marijuana-Related Calls"),
position = c("bottomright"),
options = layersControlOptions(collapsed = FALSE))
})
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
df <- weed[weed$Date >= input$range[1] & weed$Date <= input$range[2],] %>%
group_by(Zip) %>%
summarize(count = n(), paste("Number of cases: ", "<b>", count, "</b>"))
names(df) <- c("zip", "count", "numCases")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
filteredShopData <- reactive({
df <- shops[shops$opening >= input$range[1] & shops$opening <= input$range[2],] %>%
group_by(zip) %>%
summarize(count = n(), paste("<b>", name, "</b>", collapse = "<br/>"))
names(df) <- c("zip", "count", "name")
df <- join(df, zipcode[,c(1,4,5)], by = "zip")
return(df)
})
# Plot pot shops
observe({
if (nrow(filteredShopData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredShopData()) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~500*sqrt(count),
color = "black", fillOpacity = 0.5,
popup = ~name, group = "Recreational Shops")
}
})
# Plot calls in WA state
observe({
if (nrow(filteredData()) == 0) {leafletProxy("map") %>% clearShapes()}
else {
leafletProxy("map", data = filteredData()) %>%
clearMarkers() %>%
addCircles(~longitude, ~latitude,
weight = 1, radius = ~700*sqrt(count),
color = "red", fillOpacity = 0.35,
popup = ~numCases, group = "Marijuana-Related Calls"
)
}
})
}
shinyApp(ui, server)
shop <- readRDS("shopdata.rds")
head(weed)
saveRDS(weed, "weedData.rds")
weedrds <- readRDS("weeddata.rds")
weedrds <- readRDS("weedData.rds")
head(weedrds)
head(shops)
class(shops$opening)
saveRDS(shops, "shopData.rds")
shoprds <- readRDS("shopData.rds")
head(shoprds)
class(shoprds$opening)
saveRDS(shops, "shopData.rds")
saveRDS(shops, "shopData.rds")
shiny::runApp('~/Documents/Poison Center/WAstate_PotAnalysis/map_app')
shiny::runApp('~/Documents/Poison Center/WAstate_PotAnalysis/map_app')
